name: Continuous Integration

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        php-versions: ['7.4', '8.0', '8.1']
      fail-fast: false

    name: PHP ${{ matrix.php-versions }} Test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, intl
        ini-values: post_max_size=256M, max_execution_time=180, memory_limit=256M
        coverage: xdebug
        tools: composer:v2, phpunit, php-cs-fixer, phpcs

    - name: Debug PHP Installation
      run: |
        php -v
        php -m
        composer -V

    - name: Validate composer.json
      run: composer validate

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-php-${{ matrix.php-versions }}-composer-${{ hashFiles('**/composer.json') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-versions }}-composer-
          ${{ runner.os }}-php-${{ matrix.php-versions }}-
          ${{ runner.os }}-php-

    - name: Clean Composer
      run: |
        rm -f composer.lock
        rm -rf vendor/

    - name: Install Dependencies
      run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

    - name: Check PHP Syntax
      run: |
        echo "Checking PHP syntax..."
        find . -type f -name '*.php' -not -path "./vendor/*" -print0 | xargs -0 -n1 -P4 php -l

    - name: Run PHP CodeSniffer
      run: |
        echo "Running PHPCS..."
        vendor/bin/phpcs -v --standard=WordPress --extensions=php --ignore=*/vendor/*,*/tests/* .

    - name: Run PHPUnit tests
      run: |
        echo "Running PHPUnit tests..."
        vendor/bin/phpunit --debug --verbose

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: success()
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}